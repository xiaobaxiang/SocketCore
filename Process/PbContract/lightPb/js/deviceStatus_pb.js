/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SocketCmd.DeviceStatus', null, global);
goog.exportSymbol('proto.SocketCmd.LightStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocketCmd.DeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocketCmd.DeviceStatus.repeatedFields_, null);
};
goog.inherits(proto.SocketCmd.DeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SocketCmd.DeviceStatus.displayName = 'proto.SocketCmd.DeviceStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocketCmd.DeviceStatus.repeatedFields_ = [23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocketCmd.DeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.SocketCmd.DeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocketCmd.DeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocketCmd.DeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmdcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oppositeid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timetoken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lightstatusList: jspb.Message.toObjectList(msg.getLightstatusList(),
    proto.SocketCmd.LightStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocketCmd.DeviceStatus}
 */
proto.SocketCmd.DeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocketCmd.DeviceStatus;
  return proto.SocketCmd.DeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocketCmd.DeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocketCmd.DeviceStatus}
 */
proto.SocketCmd.DeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmdcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOppositeid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimetoken(value);
      break;
    case 23:
      var value = new proto.SocketCmd.LightStatus;
      reader.readMessage(value,proto.SocketCmd.LightStatus.deserializeBinaryFromReader);
      msg.addLightstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocketCmd.DeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocketCmd.DeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocketCmd.DeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocketCmd.DeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmdcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOppositeid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimetoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLightstatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      proto.SocketCmd.LightStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cmdCode = 1;
 * @return {string}
 */
proto.SocketCmd.DeviceStatus.prototype.getCmdcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SocketCmd.DeviceStatus.prototype.setCmdcode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identity = 2;
 * @return {string}
 */
proto.SocketCmd.DeviceStatus.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SocketCmd.DeviceStatus.prototype.setIdentity = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string oppositeId = 3;
 * @return {string}
 */
proto.SocketCmd.DeviceStatus.prototype.getOppositeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SocketCmd.DeviceStatus.prototype.setOppositeid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string timeToken = 4;
 * @return {string}
 */
proto.SocketCmd.DeviceStatus.prototype.getTimetoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.SocketCmd.DeviceStatus.prototype.setTimetoken = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated LightStatus lightStatus = 23;
 * @return {!Array.<!proto.SocketCmd.LightStatus>}
 */
proto.SocketCmd.DeviceStatus.prototype.getLightstatusList = function() {
  return /** @type{!Array.<!proto.SocketCmd.LightStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SocketCmd.LightStatus, 23));
};


/** @param {!Array.<!proto.SocketCmd.LightStatus>} value */
proto.SocketCmd.DeviceStatus.prototype.setLightstatusList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.SocketCmd.LightStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SocketCmd.LightStatus}
 */
proto.SocketCmd.DeviceStatus.prototype.addLightstatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.SocketCmd.LightStatus, opt_index);
};


proto.SocketCmd.DeviceStatus.prototype.clearLightstatusList = function() {
  this.setLightstatusList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocketCmd.LightStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocketCmd.LightStatus.repeatedFields_, null);
};
goog.inherits(proto.SocketCmd.LightStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SocketCmd.LightStatus.displayName = 'proto.SocketCmd.LightStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocketCmd.LightStatus.repeatedFields_ = [34];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocketCmd.LightStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.SocketCmd.LightStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocketCmd.LightStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocketCmd.LightStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    lightno: jspb.Message.getFieldWithDefault(msg, 13, ""),
    status: jspb.Message.getFieldWithDefault(msg, 15, ""),
    lightpw: jspb.Message.getFieldWithDefault(msg, 16, 0),
    lightlu: jspb.Message.getFieldWithDefault(msg, 17, 0),
    lightli: jspb.Message.getFieldWithDefault(msg, 18, 0),
    lightbu: jspb.Message.getFieldWithDefault(msg, 19, 0),
    lightbt: jspb.Message.getFieldWithDefault(msg, 20, 0),
    lightuu: jspb.Message.getFieldWithDefault(msg, 21, 0),
    lightui: jspb.Message.getFieldWithDefault(msg, 22, 0),
    lightbguList: jspb.Message.getRepeatedField(msg, 34)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocketCmd.LightStatus}
 */
proto.SocketCmd.LightStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocketCmd.LightStatus;
  return proto.SocketCmd.LightStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocketCmd.LightStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocketCmd.LightStatus}
 */
proto.SocketCmd.LightStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLightno(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLightpw(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLightlu(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLightli(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLightbu(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLightbt(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLightuu(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLightui(value);
      break;
    case 34:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setLightbguList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocketCmd.LightStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocketCmd.LightStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocketCmd.LightStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocketCmd.LightStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLightno();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLightpw();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getLightlu();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getLightli();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getLightbu();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getLightbt();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getLightuu();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getLightui();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getLightbguList();
  if (f.length > 0) {
    writer.writePackedInt32(
      34,
      f
    );
  }
};


/**
 * optional string lightNo = 13;
 * @return {string}
 */
proto.SocketCmd.LightStatus.prototype.getLightno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.SocketCmd.LightStatus.prototype.setLightno = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string status = 15;
 * @return {string}
 */
proto.SocketCmd.LightStatus.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.SocketCmd.LightStatus.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int32 lightPw = 16;
 * @return {number}
 */
proto.SocketCmd.LightStatus.prototype.getLightpw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.SocketCmd.LightStatus.prototype.setLightpw = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 lightLu = 17;
 * @return {number}
 */
proto.SocketCmd.LightStatus.prototype.getLightlu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.SocketCmd.LightStatus.prototype.setLightlu = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 lightLi = 18;
 * @return {number}
 */
proto.SocketCmd.LightStatus.prototype.getLightli = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.SocketCmd.LightStatus.prototype.setLightli = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 lightBu = 19;
 * @return {number}
 */
proto.SocketCmd.LightStatus.prototype.getLightbu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.SocketCmd.LightStatus.prototype.setLightbu = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 lightBt = 20;
 * @return {number}
 */
proto.SocketCmd.LightStatus.prototype.getLightbt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.SocketCmd.LightStatus.prototype.setLightbt = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 lightUu = 21;
 * @return {number}
 */
proto.SocketCmd.LightStatus.prototype.getLightuu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.SocketCmd.LightStatus.prototype.setLightuu = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 lightUi = 22;
 * @return {number}
 */
proto.SocketCmd.LightStatus.prototype.getLightui = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.SocketCmd.LightStatus.prototype.setLightui = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * repeated int32 lightBgu = 34;
 * @return {!Array.<number>}
 */
proto.SocketCmd.LightStatus.prototype.getLightbguList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 34));
};


/** @param {!Array.<number>} value */
proto.SocketCmd.LightStatus.prototype.setLightbguList = function(value) {
  jspb.Message.setField(this, 34, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SocketCmd.LightStatus.prototype.addLightbgu = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 34, value, opt_index);
};


proto.SocketCmd.LightStatus.prototype.clearLightbguList = function() {
  this.setLightbguList([]);
};


goog.object.extend(exports, proto.SocketCmd);
