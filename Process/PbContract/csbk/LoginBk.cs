// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: loginBk.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SocketCmd {

  /// <summary>Holder for reflection information generated from loginBk.proto</summary>
  public static partial class LoginBkReflection {

    #region Descriptor
    /// <summary>File descriptor for loginBk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginBkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1sb2dpbkJrLnByb3RvEglTb2NrZXRDbWQimQEKB0xvZ2luQmsSDwoHY21k",
            "Q29kZRgBIAEoCRIQCghpZGVudGl0eRgCIAEoCRIRCgl0aW1lVG9rZW4YBCAB",
            "KAkSEgoKcmVzdWx0Q29kZRgFIAEoBRIQCghzZXJ2ZXJJZBgGIAEoDRIQCghz",
            "ZXJ2ZXJJcBgLIAEoCRIgCgZsaWdodHMYDiADKAsyEC5Tb2NrZXRDbWQuTGln",
            "aHQiKgoFTGlnaHQSEAoIY2VsbEFkZHIYDCABKA0SDwoHbGlnaHRObxgNIAEo",
            "CWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketCmd.LoginBk), global::SocketCmd.LoginBk.Parser, new[]{ "CmdCode", "Identity", "TimeToken", "ResultCode", "ServerId", "ServerIp", "Lights" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketCmd.Light), global::SocketCmd.Light.Parser, new[]{ "CellAddr", "LightNo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LoginBk : pb::IMessage<LoginBk> {
    private static readonly pb::MessageParser<LoginBk> _parser = new pb::MessageParser<LoginBk>(() => new LoginBk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginBk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketCmd.LoginBkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginBk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginBk(LoginBk other) : this() {
      cmdCode_ = other.cmdCode_;
      identity_ = other.identity_;
      timeToken_ = other.timeToken_;
      resultCode_ = other.resultCode_;
      serverId_ = other.serverId_;
      serverIp_ = other.serverIp_;
      lights_ = other.lights_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginBk Clone() {
      return new LoginBk(this);
    }

    /// <summary>Field number for the "cmdCode" field.</summary>
    public const int CmdCodeFieldNumber = 1;
    private string cmdCode_ = "";
    /// <summary>
    ///命令号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdCode {
      get { return cmdCode_; }
      set {
        cmdCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private string identity_ = "";
    /// <summary>
    ///socket对象标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeToken" field.</summary>
    public const int TimeTokenFieldNumber = 4;
    private string timeToken_ = "";
    /// <summary>
    ///时间戳yyyy-MM-dd HH:mm:ss.fff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeToken {
      get { return timeToken_; }
      set {
        timeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resultCode" field.</summary>
    public const int ResultCodeFieldNumber = 5;
    private int resultCode_;
    /// <summary>
    ///操作成功1成功，其他失败（4为重新登录）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 6;
    private uint serverId_;
    /// <summary>
    ///会按照数据的大小使用合适的字节大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "serverIp" field.</summary>
    public const int ServerIpFieldNumber = 11;
    private string serverIp_ = "";
    /// <summary>
    ///连接新服务器的Ip端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIp {
      get { return serverIp_; }
      set {
        serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lights" field.</summary>
    public const int LightsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SocketCmd.Light> _repeated_lights_codec
        = pb::FieldCodec.ForMessage(114, global::SocketCmd.Light.Parser);
    private readonly pbc::RepeatedField<global::SocketCmd.Light> lights_ = new pbc::RepeatedField<global::SocketCmd.Light>();
    /// <summary>
    ///中继下包含的路灯
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketCmd.Light> Lights {
      get { return lights_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginBk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginBk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdCode != other.CmdCode) return false;
      if (Identity != other.Identity) return false;
      if (TimeToken != other.TimeToken) return false;
      if (ResultCode != other.ResultCode) return false;
      if (ServerId != other.ServerId) return false;
      if (ServerIp != other.ServerIp) return false;
      if(!lights_.Equals(other.lights_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdCode.Length != 0) hash ^= CmdCode.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (TimeToken.Length != 0) hash ^= TimeToken.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (ServerIp.Length != 0) hash ^= ServerIp.GetHashCode();
      hash ^= lights_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CmdCode);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (TimeToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TimeToken);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ResultCode);
      }
      if (ServerId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ServerId);
      }
      if (ServerIp.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ServerIp);
      }
      lights_.WriteTo(output, _repeated_lights_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdCode);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identity);
      }
      if (TimeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeToken);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (ServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIp);
      }
      size += lights_.CalculateSize(_repeated_lights_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginBk other) {
      if (other == null) {
        return;
      }
      if (other.CmdCode.Length != 0) {
        CmdCode = other.CmdCode;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      if (other.TimeToken.Length != 0) {
        TimeToken = other.TimeToken;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.ServerIp.Length != 0) {
        ServerIp = other.ServerIp;
      }
      lights_.Add(other.lights_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CmdCode = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 34: {
            TimeToken = input.ReadString();
            break;
          }
          case 40: {
            ResultCode = input.ReadInt32();
            break;
          }
          case 48: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 90: {
            ServerIp = input.ReadString();
            break;
          }
          case 114: {
            lights_.AddEntriesFrom(input, _repeated_lights_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Light : pb::IMessage<Light> {
    private static readonly pb::MessageParser<Light> _parser = new pb::MessageParser<Light>(() => new Light());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Light> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketCmd.LoginBkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light(Light other) : this() {
      cellAddr_ = other.cellAddr_;
      lightNo_ = other.lightNo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light Clone() {
      return new Light(this);
    }

    /// <summary>Field number for the "cellAddr" field.</summary>
    public const int CellAddrFieldNumber = 12;
    private uint cellAddr_;
    /// <summary>
    ///单元格地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CellAddr {
      get { return cellAddr_; }
      set {
        cellAddr_ = value;
      }
    }

    /// <summary>Field number for the "lightNo" field.</summary>
    public const int LightNoFieldNumber = 13;
    private string lightNo_ = "";
    /// <summary>
    ///路灯标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LightNo {
      get { return lightNo_; }
      set {
        lightNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Light);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Light other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellAddr != other.CellAddr) return false;
      if (LightNo != other.LightNo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellAddr != 0) hash ^= CellAddr.GetHashCode();
      if (LightNo.Length != 0) hash ^= LightNo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CellAddr != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CellAddr);
      }
      if (LightNo.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LightNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellAddr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CellAddr);
      }
      if (LightNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LightNo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Light other) {
      if (other == null) {
        return;
      }
      if (other.CellAddr != 0) {
        CellAddr = other.CellAddr;
      }
      if (other.LightNo.Length != 0) {
        LightNo = other.LightNo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 96: {
            CellAddr = input.ReadUInt32();
            break;
          }
          case 106: {
            LightNo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
